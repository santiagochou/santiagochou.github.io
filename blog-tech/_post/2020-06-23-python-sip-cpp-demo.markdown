---
layout: post
title:  "Python SIP CPP Demo"
date:   2020-06-23 15:49:24
category: tech
---


* References:
  * [https://blog.csdn.net/sunny2038/article/details/7237630](https://blog.csdn.net/sunny2038/article/details/7237630)

#### Install SIP

Download corresponding sip package from [here](https://riverbankcomputing.com/software/sip/download)

#### Create and edit C file `add.c`

```C

/* File : add.c */
int add(int x, int y) 
{  
	int g;  
	g = x + y;
	return g;
}
```

#### Create and edit SIP file `add.sip`

```C
/* add.sip */
/* Define the SIP wrapper to the add library. */
%Module(name=add, language="C")
int add(int x, int y);
```

#### Compile C file to `.a` or `.so` library

```Shell
# For .a library
gcc -c add.c
ar -r libadd.a add.o
```

```Shell
# For .so library
gcc add.c -shared -fPIC -o libadd.so
```

#### Create and edit python file `configure.py`

```Python
import os
import sipconfig
 
# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "add.sbf"
 
# Get the SIP configuration information.
config = sipconfig.Configuration()
 
# Run SIP to generate the code.
os.system(" ".join([config.sip_bin, "-c", ".", "-b", build_file, "add.sip"]))
 
# Create the Makefile.
makefile = sipconfig.SIPModuleMakefile(config, build_file)
 
# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
makefile.extra_libs = ["add"]
 
# Generate the Makefile itself.
```

#### Generate file `add.sbf` and `Makefile`

```Shell
python3 configure.py
```
* Note: the `Makefile` should be modified for adapt `dynamic` and `static` library
* for `static` library, we should set `LIBS` variable to full name of the library.
* for `dynamic` library, we shoud add `-L .` at the front of the `-ladd` to `LIBS` variable

#### Compile and test

* For compile:
```Shell
make
sudo make install
```

* for test, we just test it in python shell.
```Python
import add
add.add(2,3)
```

* Done.
